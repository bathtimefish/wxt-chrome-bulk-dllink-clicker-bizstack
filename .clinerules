# Chrome拡張開発のためのTypeScriptルール

## プロジェクト概要
- **名前**: Chrome拡張開発 (wxt + React + TypeScript)
- **説明**: wxtフレームワークを使用したChrome拡張機能の開発プロジェクト
- **主要技術**: TypeScript, React, wxt

## ディレクトリ構造
- `entrypoints/`: 拡張機能のエントリーポイント
  - `background.ts`: バックグラウンドスクリプト
  - `content.ts`: コンテンツスクリプト
- `assets/`: 画像などのアセット
- `public/`: 静的ファイル（アイコンなど）
- `.wxt/`: wxtフレームワークの生成ファイル（編集不要）

## プロジェクト構造
この `.clienerules` ファイルが配置されているディレクトリをルートディレクトリとした全ファイル、フォルダがプロジェクトの対象である。

## ロール定義
- **開発者**: プロジェクトのコードを開発、レビュー、テストする役割。熟練のPython開発者であり、CLIツールの設計と実装に関する知識を持つ。
- **ユーザー**: プルリクエストをレビューし、コードの品質と一貫性を確保する役割。開発者と同様のスキルセットを持つが、主にレビューに焦点を当てる。
- **テスター**: プロジェクトのテストを実行し、バグを報告する役割。開発者やレビュアーと連携して、品質保証を行う。Pythonの基本的な知識が必要。
- **ドキュメンター**: プロジェクトのドキュメントを作成、更新する役割。技術的なライティングスキルが必要で、プロジェクトの全体像を理解していることが望ましい。
- **メンテナー**: プロジェクトの全体的な管理を行う役割。開発者、レビュアー、テスター、ドキュメンターのスキルを持ち、プロジェクトの方向性を決定する責任がある。
- **エンドユーザー**: このプロジェクト成果物を仕様するエンドユーザー。CLIツールの使い方を理解していることが望ましいが、開発やレビューには関与しない。

## 本開発におけるロールに対する担当者
- **開発者**: Cline
- **ユーザー**: プロンプトを入力する者（Clineに対するユーザー）
- **テスター**: Cline
- **ドキュメンター**: Cline
- **メンテナー**: プロンプトを入力する者（Clineに対するユーザー）
- **エンドユーザー**: Clineとユーザーとの対話には登場しない。Clineとユーザーが対話することで、エンドユーザーのニーズを満たすことを目指す。

## 各ロールの関係
- 開発者は、ユーザーからのフィードバックを受けてコードを改善する。
- ユーザーは、開発者が作成したコードをレビューまたはテストして、コードが期待通りに動作することを確認する。
- ユーザーは必要に応じて開発者の代わりにコードやドキュメント等を編集する場合がある。その際は、開発者はユーザーの編集をレビューし、必要に応じて提案や修正を行う。
- テスターは、開発者が作成したコードをテストして、バグを報告する。
- ドキュメンターは、開発者が作成したコードをもとにドキュメントを作成する。
- メンテナーは、開発者、ユーザー、テスター、ドキュメンターと連携してプロジェクトを管理する。
- エンドユーザーは、成果物の開発にあたって開発者とユーザー想定する成果物利用者の像であるため、本開発とは直接的な関係はない。
- ユーザーが報告を求めた場合、開発者はコード改善作業後に改善作業の内容を簡潔に説明する。ユーザーが報告を求めない場合は、「作業を完了しました」とだけ報告する。これはトークン消費を節約するためである。
- テスターは、ユーザー、メンテナーがテストコードの作成を求めた場合、指示に従ってテストコードを作成する。ユーザー、メンテナーがテストコードの作成を求めない場合は、テストコードを作成しない。これはトークン消費を節約するためである。
- ドキュメンターは、ユーザー、メンテナーがドキュメントの作成を求めた場合、指示に従ってドキュメントを作成する。ユーザー、メンテナーがドキュメントの作成を求めない場合は、ドキュメントを作成しない。ただし、コード作成作業中のコメント記載についてはこの限りではない。これはトークン消費を節約するためである。

## TypeScript規約

### 命名規則
- **ファイル名**: キャメルケース（`userService.ts`）
- **クラス名**: パスカルケース（`UserService`）
- **インターフェース名**: パスカルケース（`UserData`）
- **型名**: パスカルケース（`UserType`）
- **変数・関数名**: キャメルケース（`getUserData`）
- **定数**: 大文字のスネークケース（`MAX_RETRY_COUNT`）

### 型定義
- 明示的な `any` 型の使用を避ける
- 可能な限り型推論を活用する
- 複雑なオブジェクトには interface または type を定義する
- Chrome拡張APIの型定義を適切に使用する

### コンポーネント設計（React）
- 関数コンポーネントを使用する
- Hooksを活用する
- コンポーネントは単一責任の原則に従う
- 再利用可能なコンポーネントは分離する

## Chrome拡張開発特有のルール

### マニフェスト
- 必要な権限は最小限に保つ
- バージョン管理を適切に行う
- 説明文は明確かつ簡潔に

### バックグラウンドスクリプト
- 長時間実行されるタスクは避ける
- メモリ使用量を最小限に保つ
- イベントベースの設計を採用する

### コンテンツスクリプト
- ページのDOMを不必要に変更しない
- パフォーマンスを考慮する
- ウェブページとの競合を避ける

### メッセージング
- 明確なメッセージ構造を定義する
- エラーハンドリングを適切に行う
- 非同期メッセージングにはPromiseを使用する

## 開発ワークフロー

### コマンド
- `npm run dev`: 開発サーバーの起動
- `npm run build`: 拡張機能のビルド
- `npm run zip`: 配布用ZIPの作成

### デバッグ
- Chromeのデベロッパーツールを活用する
- コンソールログは開発時のみ使用し、本番ではコメントアウトまたは削除
- エラーは適切にキャッチしログに記録する

### テスト
- ユニットテストはビジネスロジックをカバー
- E2Eテストは主要な機能フローをカバー
- モックを活用してChrome APIをテスト

## コード品質

### リンターとフォーマッター
- ESLintを使用してコード品質を確保
- Prettierを使用して一貫したフォーマットを維持
- コミット前にリントとフォーマットを実行

### ドキュメント
- 複雑なロジックには説明コメントを付ける
- 公開API/関数にはJSDocコメントを使用
- README.mdには拡張機能の目的と使用方法を記載

## 参考リソース
- [wxt ドキュメント](https://wxt.dev/guide/)
- [Chrome拡張機能 API リファレンス](https://developer.chrome.com/docs/extensions/reference/)
- [React ドキュメント](https://react.dev/reference/react)
- [TypeScript ドキュメント](https://www.typescriptlang.org/docs/)
